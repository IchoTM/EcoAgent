from uagents import Agent, Context, Model
import asyncio
from datetime import datetime
from database import ConsumptionData, get_session

# Test data
test_consumption = ConsumptionData(
    electricity=150,
    water=250,
    gas=120,
    car_miles=30,
    public_transport=10,
    household_size=3
)

async def test_eco_monitor():
    """Test the eco monitor agent functionality"""
    from agents.eco_monitor_agent import eco_monitor
    
    # Add test data to database
    session = get_session()
    session.add(test_consumption)
    session.commit()
    
    print("Testing eco_monitor agent...")
    ctx = Context()
    await eco_monitor._interval_handlers[0](ctx)  # Run the monitor_consumption handler
    
    # Check if alert was generated
    alert = ctx.storage.get("latest_alert")
    if alert:
        print("✅ Eco monitor agent successfully generated an alert")
        print(f"Alert message: {alert['message']}")
    else:
        print("❌ No alert generated by eco monitor agent")

async def test_eco_advisor():
    """Test the eco advisor agent functionality"""
    from agents.eco_advisor_agent import eco_advisor, RecommendationRequest
    
    print("\nTesting eco_advisor agent...")
    ctx = Context()
    
    # Create test request
    request = RecommendationRequest(
        consumption_data={"electricity": 150, "water": 250, "gas": 120},
        user_preferences={"budget": "medium", "implementation_time": "short-term"}
    )
    
    # Test recommendation generation
    try:
        await eco_advisor._message_handlers[RecommendationRequest](
            ctx, "test_sender", request
        )
        print("✅ Eco advisor agent successfully processed the request")
    except Exception as e:
        print(f"❌ Error testing eco advisor: {str(e)}")

async def main():
    """Run all tests"""
    print("Starting Agent Verification Tests...")
    print("=" * 50)
    
    await test_eco_monitor()
    await test_eco_advisor()
    
    print("\nTests completed!")

if __name__ == "__main__":
    asyncio.run(main())
